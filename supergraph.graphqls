schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Address
  @join__type(graph: MS_FORMATION)
  @join__type(graph: MS_INFRASTRUCTURE)
{
  postCode: Int
  country: String
  state: String
  locality: String
  street: String
  houseNumber: String
}

input AddressInput
  @join__type(graph: MS_FORMATION)
  @join__type(graph: MS_INFRASTRUCTURE)
{
  postCode: Int
  country: String
  state: String
  locality: String
  street: String
  houseNumber: String
}

type Army
  @join__type(graph: MS_FORMATION, key: "name")
{
  name: String!
  commander: Military
  brigades: [Brigade!]!
  divisions: [Division!]!
  corps: [Corps!]!
}

input ArmyFilter
  @join__type(graph: MS_FORMATION)
{
  name: String
  commander: String
}

input ArmyInput
  @join__type(graph: MS_FORMATION)
{
  name: String!
  commander: String
  brigades: [String!]
  divisions: [String!]
  corps: [String!]
}

type Attribute
  @join__type(graph: MS_EQUIPMENT)
  @join__type(graph: MS_INFRASTRUCTURE)
  @join__type(graph: MS_WEAPON)
{
  name: String!
  value: String!
}

input AttributeInput
  @join__type(graph: MS_EQUIPMENT)
  @join__type(graph: MS_INFRASTRUCTURE)
  @join__type(graph: MS_WEAPON)
{
  name: String!
  value: String!
}

type Brigade
  @join__type(graph: MS_FORMATION, key: "name")
{
  name: String!
  commander: Military
  units: [Unit!]!
  armies: [Army!]!
}

input BrigadeFilter
  @join__type(graph: MS_FORMATION)
{
  name: String
  commander: String
}

input BrigadeInput
  @join__type(graph: MS_FORMATION)
{
  name: String!
  commander: String
  units: [String!]
  armies: [String!]
}

type Building
  @join__type(graph: MS_INFRASTRUCTURE)
{
  name: String!
  coordinate: Coordinate
  address: Address
  unit: Unit
  attributes: [Attribute!]!
  companies: [Company!]!
  platoons: [Platoon!]!
  squads: [Squad!]!
}

input BuildingFilter
  @join__type(graph: MS_INFRASTRUCTURE)
{
  name: String
  address: String
  unit: String
}

input BuildingInput
  @join__type(graph: MS_INFRASTRUCTURE)
{
  name: String!
  coordinate: CoordinateInput
  address: AddressInput
  unit: String
  attributes: [AttributeInput!]
  companies: [String!]
  platoons: [String!]
  squads: [String!]
}

type CombatEquipment
  @join__type(graph: MS_EQUIPMENT, key: "serialNumber")
{
  serialNumber: String!
  type: CombatEquipmentType
  unit: Unit
}

type CombatEquipmentCategory
  @join__type(graph: MS_EQUIPMENT, key: "name")
{
  name: String!
}

input CombatEquipmentFilter
  @join__type(graph: MS_EQUIPMENT)
{
  type: String
  unit: String
}

input CombatEquipmentInput
  @join__type(graph: MS_EQUIPMENT)
{
  serialNumber: String!
  type: String
  unit: String
}

type CombatEquipmentType
  @join__type(graph: MS_EQUIPMENT, key: "id")
{
  id: ID!
  name: String!
  category: CombatEquipmentCategory!
  attributes: [Attribute!]
}

input CombatEquipmentTypeFilter
  @join__type(graph: MS_EQUIPMENT)
{
  name: String
  category: String
}

input CombatEquipmentTypeInput
  @join__type(graph: MS_EQUIPMENT)
{
  name: String!
  category: String!
  attributes: [AttributeInput!]
}

type Company
  @join__type(graph: MS_FORMATION, key: "name")
  @join__type(graph: MS_INFRASTRUCTURE, key: "name", extension: true, resolvable: false)
{
  name: String!
  commander: Military @join__field(graph: MS_FORMATION)
  unit: Unit @join__field(graph: MS_FORMATION)
  platoons: [Platoon!]! @join__field(graph: MS_FORMATION)
}

input CompanyFilter
  @join__type(graph: MS_FORMATION)
{
  name: String
  commander: String
}

input CompanyInput
  @join__type(graph: MS_FORMATION)
{
  name: String!
  commander: String
  unit: String
  platoons: [String!]
}

type Coordinate
  @join__type(graph: MS_FORMATION)
  @join__type(graph: MS_INFRASTRUCTURE)
{
  lat: Float!
  lng: Float!
}

input CoordinateInput
  @join__type(graph: MS_FORMATION)
  @join__type(graph: MS_INFRASTRUCTURE)
{
  lat: Float!
  lng: Float!
}

type Corps
  @join__type(graph: MS_FORMATION, key: "name")
{
  name: String!
  commander: Military
  units: [Unit!]!
  armies: [Army!]!
}

input CorpsFilter
  @join__type(graph: MS_FORMATION)
{
  name: String
  commander: String
}

input CorpsInput
  @join__type(graph: MS_FORMATION)
{
  name: String!
  commander: String
  units: [String!]
  armies: [String!]
}

scalar Date
  @join__type(graph: MS_MILITARY)

type Division
  @join__type(graph: MS_FORMATION, key: "name")
{
  name: String!
  commander: Military
  units: [Unit!]!
  armies: [Army!]!
}

input DivisionFilter
  @join__type(graph: MS_FORMATION)
{
  name: String
  commander: String
}

input DivisionInput
  @join__type(graph: MS_FORMATION)
{
  name: String!
  commander: String
  units: [String!]
  armies: [String!]
}

scalar join__FieldSet

enum join__Graph {
  MS_EQUIPMENT @join__graph(name: "ms-equipment", url: "http://ms-equipment:8084/graphql")
  MS_FORMATION @join__graph(name: "ms-formation", url: "http://ms-formation:8082/graphql")
  MS_INFRASTRUCTURE @join__graph(name: "ms-infrastructure", url: "http://ms-infrastructure:8083/graphql")
  MS_MILITARY @join__graph(name: "ms-military", url: "http://ms-military:8081/graphql")
  MS_WEAPON @join__graph(name: "ms-weapon", url: "http://ms-weapon:8085/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Military
  @join__type(graph: MS_FORMATION, key: "mbn", extension: true, resolvable: false)
  @join__type(graph: MS_MILITARY, key: "mbn")
{
  mbn: String!
  firstName: String! @join__field(graph: MS_MILITARY)
  lastName: String! @join__field(graph: MS_MILITARY)
  middleName: String @join__field(graph: MS_MILITARY)
  birthDate: Date! @join__field(graph: MS_MILITARY)
  rank: Rank @join__field(graph: MS_MILITARY)
  specialties: [Specialty!]! @join__field(graph: MS_MILITARY)
  attributes: [MilitaryAttribute!]! @join__field(graph: MS_MILITARY)
  unit: Unit @join__field(graph: MS_MILITARY)
}

type MilitaryAttribute
  @join__type(graph: MS_MILITARY)
{
  rank: Rank!
  name: String!
  value: String!
}

type MilitaryAttributeDefinition
  @join__type(graph: MS_MILITARY)
{
  name: String!
  rank: Rank!
}

input MilitaryAttributeDefinitionFilter
  @join__type(graph: MS_MILITARY)
{
  rank: String
}

input MilitaryAttributeInput
  @join__type(graph: MS_MILITARY)
{
  rank: String!
  name: String!
  value: String!
}

input MilitaryFilter
  @join__type(graph: MS_MILITARY)
{
  firstName: String
  lastName: String
  middleName: String
  rank: String
  unit: String
}

input MilitaryInput
  @join__type(graph: MS_MILITARY)
{
  mbn: String!
  firstName: String!
  lastName: String!
  middleName: String
  birthDate: Date!
  rank: String
  attributes: [MilitaryAttributeInput!]
  specialties: [String!]
  unit: String
}

type Mutation
  @join__type(graph: MS_EQUIPMENT)
  @join__type(graph: MS_FORMATION)
  @join__type(graph: MS_INFRASTRUCTURE)
  @join__type(graph: MS_MILITARY)
  @join__type(graph: MS_WEAPON)
{
  createCombatEquipment(input: CombatEquipmentInput!): CombatEquipment @join__field(graph: MS_EQUIPMENT)
  updateCombatEquipment(serialNumber: String!, input: CombatEquipmentInput!): CombatEquipment @join__field(graph: MS_EQUIPMENT)
  deleteCombatEquipment(serialNumber: String!): Int @join__field(graph: MS_EQUIPMENT)
  createCombatEquipmentType(input: CombatEquipmentTypeInput!): CombatEquipmentType @join__field(graph: MS_EQUIPMENT)
  updateCombatEquipmentType(name: String!, category: String!, input: CombatEquipmentTypeInput!): CombatEquipmentType @join__field(graph: MS_EQUIPMENT)
  deleteCombatEquipmentType(name: String!, category: String!): Int @join__field(graph: MS_EQUIPMENT)
  createCombatEquipmentCategory(input: String!): CombatEquipmentCategory @join__field(graph: MS_EQUIPMENT)
  updateCombatEquipmentCategory(name: String!, input: String!): CombatEquipmentCategory @join__field(graph: MS_EQUIPMENT)
  deleteCombatEquipmentCategory(name: String!): Int @join__field(graph: MS_EQUIPMENT)
  createArmy(input: ArmyInput!): Army @join__field(graph: MS_FORMATION)
  updateArmy(name: String!, input: ArmyInput!): Army @join__field(graph: MS_FORMATION)
  deleteArmy(name: String!): Int @join__field(graph: MS_FORMATION)
  createBrigade(input: BrigadeInput!): Brigade @join__field(graph: MS_FORMATION)
  updateBrigade(name: String!, input: BrigadeInput!): Brigade @join__field(graph: MS_FORMATION)
  deleteBrigade(name: String!): Int @join__field(graph: MS_FORMATION)
  createCompany(input: CompanyInput!): Company @join__field(graph: MS_FORMATION)
  updateCompany(name: String!, input: CompanyInput!): Company @join__field(graph: MS_FORMATION)
  deleteCompany(name: String!): Int @join__field(graph: MS_FORMATION)
  createCorps(input: CorpsInput!): Corps @join__field(graph: MS_FORMATION)
  updateCorps(name: String!, input: CorpsInput!): Corps @join__field(graph: MS_FORMATION)
  deleteCorps(name: String!): Int @join__field(graph: MS_FORMATION)
  createDivision(input: DivisionInput!): Division @join__field(graph: MS_FORMATION)
  updateDivision(name: String!, input: DivisionInput!): Division @join__field(graph: MS_FORMATION)
  deleteDivision(name: String!): Int @join__field(graph: MS_FORMATION)
  createPlatoon(input: PlatoonInput!): Platoon @join__field(graph: MS_FORMATION)
  updatePlatoon(name: String!, input: PlatoonInput!): Platoon @join__field(graph: MS_FORMATION)
  deletePlatoon(name: String!): Int @join__field(graph: MS_FORMATION)
  createSquad(input: SquadInput!): Squad @join__field(graph: MS_FORMATION)
  updateSquad(name: String!, input: SquadInput!): Squad @join__field(graph: MS_FORMATION)
  deleteSquad(name: String!): Int @join__field(graph: MS_FORMATION)
  createUnit(input: UnitInput!): Unit @join__field(graph: MS_FORMATION)
  updateUnit(name: String!, input: UnitInput!): Unit @join__field(graph: MS_FORMATION)
  deleteUnit(name: String!): Int @join__field(graph: MS_FORMATION)
  createBuilding(input: BuildingInput!): Building @join__field(graph: MS_INFRASTRUCTURE)
  updateBuilding(name: String!, unit: String, input: BuildingInput!): Building @join__field(graph: MS_INFRASTRUCTURE)
  deleteBuilding(name: String!, unit: String): Int @join__field(graph: MS_INFRASTRUCTURE)
  createMilitary(militaryInput: MilitaryInput!): Military @join__field(graph: MS_MILITARY)
  updateMilitary(mbn: String!, militaryInput: MilitaryInput!): Military @join__field(graph: MS_MILITARY)
  deleteMilitary(mbn: String!): Int @join__field(graph: MS_MILITARY)
  createWeapon(input: WeaponInput!): Weapon @join__field(graph: MS_WEAPON)
  updateWeapon(serialNumber: String!, input: WeaponInput!): Weapon @join__field(graph: MS_WEAPON)
  deleteWeapon(serialNumber: String!): Int @join__field(graph: MS_WEAPON)
  createWeaponType(input: WeaponTypeInput!): WeaponType @join__field(graph: MS_WEAPON)
  updateWeaponType(name: String!, category: String!, input: WeaponTypeInput!): WeaponType @join__field(graph: MS_WEAPON)
  deleteWeaponType(name: String!, category: String!): Int @join__field(graph: MS_WEAPON)
  createWeaponCategory(input: String!): WeaponCategory @join__field(graph: MS_WEAPON)
  updateWeaponCategory(name: String!, input: String!): WeaponCategory @join__field(graph: MS_WEAPON)
  deleteWeaponCategory(name: String!): Int @join__field(graph: MS_WEAPON)
}

input Pagination
  @join__type(graph: MS_EQUIPMENT)
  @join__type(graph: MS_FORMATION)
  @join__type(graph: MS_INFRASTRUCTURE)
  @join__type(graph: MS_MILITARY)
  @join__type(graph: MS_WEAPON)
{
  page: Int!
  pageSize: Int!
}

type Platoon
  @join__type(graph: MS_FORMATION, key: "name")
  @join__type(graph: MS_INFRASTRUCTURE, key: "name", extension: true, resolvable: false)
{
  name: String!
  commander: Military @join__field(graph: MS_FORMATION)
  company: Company @join__field(graph: MS_FORMATION)
  squads: [Squad!]! @join__field(graph: MS_FORMATION)
}

input PlatoonInput
  @join__type(graph: MS_FORMATION)
{
  name: String!
  commander: String
  company: String
  squads: [String!]
}

input PlatoonsFilter
  @join__type(graph: MS_FORMATION)
{
  name: String
  commander: String
  company: String
}

type Query
  @join__type(graph: MS_EQUIPMENT)
  @join__type(graph: MS_FORMATION)
  @join__type(graph: MS_INFRASTRUCTURE)
  @join__type(graph: MS_MILITARY)
  @join__type(graph: MS_WEAPON)
{
  getCombatEquipments(filter: CombatEquipmentFilter, pagination: Pagination, sorts: [Sort!]): [CombatEquipment!] @join__field(graph: MS_EQUIPMENT)
  getCombatEquipmentCount(filter: CombatEquipmentFilter): Int @join__field(graph: MS_EQUIPMENT)
  getCombatEquipment(serialNumber: String!): CombatEquipment @join__field(graph: MS_EQUIPMENT)
  getCombatEquipmentTypes(filter: CombatEquipmentTypeFilter, pagination: Pagination, sorts: [Sort!]): [CombatEquipmentType!] @join__field(graph: MS_EQUIPMENT)
  getCombatEquipmentTypeCount(filter: CombatEquipmentTypeFilter): Int @join__field(graph: MS_EQUIPMENT)
  getCombatEquipmentType(name: String!, category: String!): CombatEquipmentType @join__field(graph: MS_EQUIPMENT)
  getCombatEquipmentCategories(pagination: Pagination, sorts: [Sort!]): [CombatEquipmentCategory!] @join__field(graph: MS_EQUIPMENT)
  getCombatEquipmentCategoryCount: Int @join__field(graph: MS_EQUIPMENT)
  getCombatEquipmentCategory(name: String!): CombatEquipmentCategory @join__field(graph: MS_EQUIPMENT)
  getArmies(filter: ArmyFilter, commander: String, pagination: Pagination, sorts: [Sort!]): [Army!] @join__field(graph: MS_FORMATION)
  getArmyCount(filter: ArmyFilter): Int @join__field(graph: MS_FORMATION)
  getArmy(name: String!): Army @join__field(graph: MS_FORMATION)
  getBrigades(filter: BrigadeFilter, pagination: Pagination, sorts: [Sort!]): [Brigade!] @join__field(graph: MS_FORMATION)
  getBrigadeCount(filter: BrigadeFilter): Int @join__field(graph: MS_FORMATION)
  getBrigade(name: String!): Brigade @join__field(graph: MS_FORMATION)
  getCompanies(filter: CompanyFilter, pagination: Pagination, sorts: [Sort!]): [Company!] @join__field(graph: MS_FORMATION)
  getCompanyCount(filter: CompanyFilter): Int @join__field(graph: MS_FORMATION)
  getCompany(name: String!): Company @join__field(graph: MS_FORMATION)
  getCorps(filter: CorpsFilter, pagination: Pagination, sorts: [Sort!]): [Corps!] @join__field(graph: MS_FORMATION)
  getCorpsCount(filter: CorpsFilter): Int @join__field(graph: MS_FORMATION)
  getOneCorps(name: String!): Corps @join__field(graph: MS_FORMATION)
  getDivisions(filter: DivisionFilter, pagination: Pagination, sorts: [Sort!]): [Division!] @join__field(graph: MS_FORMATION)
  getDivisionCount(filter: DivisionFilter): Int @join__field(graph: MS_FORMATION)
  getDivision(name: String!): Division @join__field(graph: MS_FORMATION)
  getPlatoons(filter: PlatoonsFilter, pagination: Pagination, sorts: [Sort!]): [Platoon!] @join__field(graph: MS_FORMATION)
  getPlatoonCount(filter: PlatoonsFilter): Int @join__field(graph: MS_FORMATION)
  getPlatoon(name: String!): Platoon @join__field(graph: MS_FORMATION)
  getSquads(filter: SquadFilter, pagination: Pagination, sorts: [Sort!]): [Squad!] @join__field(graph: MS_FORMATION)
  getSquadCount(filter: SquadFilter): Int @join__field(graph: MS_FORMATION)
  getSquad(name: String!): Army @join__field(graph: MS_FORMATION)
  getUnits(filter: UnitFilter, pagination: Pagination, sorts: [Sort!]): [Unit!] @join__field(graph: MS_FORMATION)
  getUnitCount(filter: UnitFilter): Int @join__field(graph: MS_FORMATION)
  getUnit(name: String!): Unit @join__field(graph: MS_FORMATION)
  getBuildings(filter: BuildingFilter, pagination: Pagination, sorts: [Sort!]): [Building!] @join__field(graph: MS_INFRASTRUCTURE)
  getBuildingCount(filter: BuildingFilter): Int @join__field(graph: MS_INFRASTRUCTURE)
  getBuilding(name: String!, unit: String): Building @join__field(graph: MS_INFRASTRUCTURE)
  getMilitaries(filter: MilitaryFilter, pagination: Pagination, sorts: [Sort!]): [Military!] @join__field(graph: MS_MILITARY)
  getMilitaryCount(filter: MilitaryFilter): Int @join__field(graph: MS_MILITARY)
  getMilitary(mbn: String!): Military @join__field(graph: MS_MILITARY)
  getMilitaryAttributeDefinitions(filter: MilitaryAttributeDefinitionFilter): [MilitaryAttributeDefinition!] @join__field(graph: MS_MILITARY)
  getRanks(filter: RankFilter): [Rank!] @join__field(graph: MS_MILITARY)
  getRankCategories: [RankCategory!] @join__field(graph: MS_MILITARY)
  getSpecialties: [Specialty!] @join__field(graph: MS_MILITARY)
  getWeapons(filter: WeaponFilter, pagination: Pagination, sorts: [Sort!]): [Weapon!] @join__field(graph: MS_WEAPON)
  getWeaponCount(filter: WeaponFilter): Int @join__field(graph: MS_WEAPON)
  getWeapon(serialNumber: String!): Weapon @join__field(graph: MS_WEAPON)
  getWeaponTypes(filter: WeaponTypeFilter, pagination: Pagination, sorts: [Sort!]): [WeaponType!] @join__field(graph: MS_WEAPON)
  getWeaponTypeCount(filter: WeaponTypeFilter): Int @join__field(graph: MS_WEAPON)
  getWeaponType(name: String!, category: String!): WeaponType @join__field(graph: MS_WEAPON)
  getWeaponCategories(pagination: Pagination, sorts: [Sort!]): [WeaponCategory!] @join__field(graph: MS_WEAPON)
  getWeaponCategoryCount: Int @join__field(graph: MS_WEAPON)
  getWeaponCategory(name: String!): WeaponCategory @join__field(graph: MS_WEAPON)
}

type Rank
  @join__type(graph: MS_MILITARY, key: "name")
{
  name: String!
  level: Int!
  category: RankCategory!
}

type RankCategory
  @join__type(graph: MS_MILITARY, key: "name")
{
  name: String!
}

input RankFilter
  @join__type(graph: MS_MILITARY)
{
  name: String
}

input Sort
  @join__type(graph: MS_EQUIPMENT)
  @join__type(graph: MS_FORMATION)
  @join__type(graph: MS_INFRASTRUCTURE)
  @join__type(graph: MS_MILITARY)
  @join__type(graph: MS_WEAPON)
{
  field: String!
  sortAsc: Boolean!
}

type Specialty
  @join__type(graph: MS_MILITARY, key: "code")
{
  code: String!
  name: String!
}

type Squad
  @join__type(graph: MS_FORMATION, key: "name")
  @join__type(graph: MS_INFRASTRUCTURE, key: "name", extension: true, resolvable: false)
{
  name: String!
  commander: Military @join__field(graph: MS_FORMATION)
  platoon: Platoon @join__field(graph: MS_FORMATION)
}

input SquadFilter
  @join__type(graph: MS_FORMATION)
{
  name: String
  commander: String
  platoon: String
}

input SquadInput
  @join__type(graph: MS_FORMATION)
{
  name: String!
  commander: String
  platoon: String
}

type Unit
  @join__type(graph: MS_EQUIPMENT, key: "name", extension: true, resolvable: false)
  @join__type(graph: MS_FORMATION, key: "name")
  @join__type(graph: MS_INFRASTRUCTURE, key: "name", extension: true, resolvable: false)
  @join__type(graph: MS_MILITARY, key: "name", extension: true, resolvable: false)
  @join__type(graph: MS_WEAPON, key: "name", extension: true, resolvable: false)
{
  name: String!
  coordinate: Coordinate @join__field(graph: MS_FORMATION)
  address: Address @join__field(graph: MS_FORMATION)
  commander: Military @join__field(graph: MS_FORMATION)
  companies: [Company!]! @join__field(graph: MS_FORMATION)
  brigades: [Brigade!]! @join__field(graph: MS_FORMATION)
  divisions: [Division!]! @join__field(graph: MS_FORMATION)
  corps: [Corps!]! @join__field(graph: MS_FORMATION)
}

input UnitFilter
  @join__type(graph: MS_FORMATION)
{
  name: String
  address: String
  commander: String
}

input UnitInput
  @join__type(graph: MS_FORMATION)
{
  name: String!
  coordinate: CoordinateInput
  address: AddressInput
  commander: String
  companies: [String!]
  brigades: [String!]
  divisions: [String!]
  corps: [String!]
}

type Weapon
  @join__type(graph: MS_WEAPON, key: "serialNumber")
{
  serialNumber: String!
  type: WeaponType
  unit: Unit
}

type WeaponCategory
  @join__type(graph: MS_WEAPON, key: "name")
{
  name: String!
}

input WeaponFilter
  @join__type(graph: MS_WEAPON)
{
  type: String
  category: String
  unit: String
}

input WeaponInput
  @join__type(graph: MS_WEAPON)
{
  serialNumber: String!
  type: String
  unit: String
}

type WeaponType
  @join__type(graph: MS_WEAPON)
{
  name: String!
  category: WeaponCategory!
  attributes: [Attribute!]
}

input WeaponTypeFilter
  @join__type(graph: MS_WEAPON)
{
  name: String
  category: String
}

input WeaponTypeInput
  @join__type(graph: MS_WEAPON)
{
  name: String!
  category: String!
  attributes: [AttributeInput!]
}